﻿Title: DbSyncKit Performance
Order: 1
BreadcrumbTitle: Performance
ShowInNavigation: false
ShowInSidebar: false
NoSidebar: true
Xref: performance
---



<head>
    <!-- Include Chart.js library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .graph-container {
            display: flex;
            flex-wrap: wrap; 
            gap: 20px;
            justify-content: center;
            align-items: center;
        }

    </style>
</head>
<body>

    <section class="py-5">
        <h2>Performance Comparison</h2>
        <h3>Package Versions: 0.2 vs 0.3 vs 1.0 vs 1.1</h3>

        <p>
            The following table presents a comparison of mean execution times (in microseconds) for each table across different package versions: 0.2, 0.3, 1.0, and the latest 1.1 release. The values illustrate the observed performance differences between these versions.
        </p>

        <div class="table-responsive">
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Table</th>
                        <th>Mean v0.2</th>
                        <th>Mean v0.3</th>
                        <th>Mean v1.0 </th>
                        <th>Mean v1.1</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Album</td>
                        <td>403.85 &micro;s</td>
                        <td>300.564 &micro;s</td>
                        <td>114.036 &micro;s </td>
                        <td>96.939 &micro;s </td>
                    </tr>
                    <tr>
                        <td>Artist</td>
                        <td>284.72 &micro;s</td>
                        <td>209.709 &micro;s</td>
                        <td>86.862 &micro;s </td>
                        <td>76.872 &micro;s </td>
                    </tr>
                    <tr>
                        <td>Customer</td>
                        <td>219.93 &micro;s</td>
                        <td>115.595 &micro;s</td>
                        <td>41.809 &micro;s </td>
                        <td>32.264 &micro;s </td>
                    </tr>
                    <tr>
                        <td>Employee</td>
                        <td>64.85 &micro;s</td>
                        <td>23.193 &micro;s</td>
                        <td>6.749 &micro;s </td>
                        <td>6.552 &micro;s </td>
                    </tr>
                    <tr>
                        <td>Genre</td>
                        <td>44.13 &micro;s</td>
                        <td>28.123 &micro;s</td>
                        <td>12.807 &micro;s </td>
                        <td>10.821 &micro;s </td>
                    </tr>
                    <tr>
                        <td>Invoice</td>
                        <td>869.78 &micro;s</td>
                        <td>543.679 &micro;s</td>
                        <td>163.092 &micro;s </td>
                        <td>141.017 &micro;s </td>
                    </tr>
                    <tr>
                        <td>InvoiceLine</td>
                        <td>3,690.57 &micro;s</td>
                        <td>2,573.884 &micro;s</td>
                        <td>1,122.499 &micro;s </td>
                        <td>917.182 &micro;s </td>
                    </tr>
                    <tr>
                        <td>MediaType</td>
                        <td>11.85 &micro;s</td>
                        <td>6.954 &micro;s</td>
                        <td>4.687 &micro;s </td>
                        <td>4.180 &micro;s </td>
                    </tr>
                    <tr>
                        <td>Playlist</td>
                        <td>33.51 &micro;s</td>
                        <td>17.250 &micro;s</td>
                        <td>8.547 &micro;s </td>
                        <td>7.875 &micro;s </td>
                    </tr>
                    <tr>
                        <td>PlaylistTrack</td>
                        <td>15,675.30 &micro;s</td>
                        <td>15,745.778 &micro;s</td>
                        <td>10,863.654 &micro;s </td>
                        <td>9,968.597 &micro;s </td>
                    </tr>
                    <tr>
                        <td>Track</td>
                        <td>8,444.76 &micro;s</td>
                        <td>5,323.978 &micro;s</td>
                        <td>2,247.052 &micro;s </td>
                        <td>1,750.159 &micro;s </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div>
            <span>Note: 1 microsecond (&micro;s) is equal to 0.000001 seconds.</span>
        </div>
        <br/>
        <div>
            <h3>Details of Benchmark Analysis</h3>
            <p>
                The benchmarking analysis was conducted utilizing BenchmarkDotNet v0.13.11 on Windows 10 (Version: 10.0.19045.3803, Build: 22H2/2022Update) platform. The system employed an AMD Ryzen 7 7700X processor, equipped with 1 CPU, 16 logical cores, and 8 physical cores. The benchmarking process was performed using .NET SDK version 8.0.100.
            </p>
        </div>
    </section>

    <section class="py-5">
        <h2>Performance Graph</h2>
        <!-- Create a single section for both graphs -->
        <div class="graph-description">
            <p>Comparison of performance metrics for different tables across versions (excluding SQL query generation time).</p>
        </div>
        <div class="graph-container">
            <!-- Script to populate and render the charts dynamically -->
            <script>
                // Sample data for different tables
                const tableData = {
                    'Album': [403.85, 300.564, 114.036, 96.939],
                    'Artist': [284.72, 209.709, 86.862, 76.872],
                    'Customer': [219.93, 115.595, 41.809, 32.264],
                    'Employee': [64.85, 23.193, 6.749, 6.552],
                    'Genre': [44.13, 28.123, 12.807, 10.821],
                    'Invoice': [869.78, 543.679, 163.092, 141.017],
                    'InvoiceLine': [3690.57, 2573.884, 1122.499, 917.182],
                    'MediaType': [11.85, 6.954, 4.687, 4.180],
                    'Playlist': [33.51, 17.25, 8.547, 7.875],
                    'PlaylistTrack': [15675.30, 15745.778, 10863.654, 9968.597],
                    'Track': [8444.76, 5323.978, 2247.052, 1750.159]
                };

                // Loop through the table data to generate multiple charts
                Object.entries(tableData).forEach(([tableName, values]) => {
                    const canvasId = `chart${tableName}`;
                    const canvasDiv = document.createElement('div');
                    canvasDiv.style.width = '300px'; // Set the width of the canvas container
                    canvasDiv.style.height = '400px'; // Set the height of the canvas container

                    const ctx = document.createElement('canvas');
                    ctx.id = canvasId;

                    // Append the canvas to the canvas container div
                    canvasDiv.appendChild(ctx);
                    document.querySelector('.graph-container').appendChild(canvasDiv);

                    const chartData = {
                        labels: ['ver 0.2', 'ver 0.3', 'ver 1.0','ver 1.1'],
                        datasets: [
                            {
                                label: tableName,
                                backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(75, 192, 192, 0.5)'],
                                data: values
                            }
                        ]
                    };

                    const chartOptions = {
                        indexAxis: 'x',
                        elements: {
                            bar: {
                                borderWidth: 2,
                            }
                        },
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                beginAtZero: true,
                                maxBarThickness: 50,
                            },
                            y: {
                                stacked: true,
                                ticks: {
                                    callback: (value) => value + ' µs'
                                }
                            }
                        },
                    };

                    const chart = new Chart(ctx, {
                        type: 'bar',
                        data: chartData,
                        options: chartOptions
                    });
                });
            </script>
        </div>
    </section>

    <section>
        <h2>Data Source</h2>

        <p>
            The benchmark results are obtained using the DbSyncKit library with the
            <a href="https://github.com/lerocha/chinook-database">Chinook database</a> as the data source. The Chinook database has been used for comparison purposes,
            and some edits may have been made to the original data for testing and optimization purposes. Please note that the benchmark results may vary based on the specific configuration and data characteristics of your environment.
        </p>

        <p>
            Additionally, for database migration testing, the following migration links are provided:
        </p>

        <ul>
            <li>
                <strong>For MSSQL:</strong>
                <a href="https://github.com/RohitM-IN/DbSyncKit/tree/master/DbSyncKit.Test/MSSQL/Migrations/MSSQL">
                    MSSQL Migrations
                </a>
            </li>
            <li>
                <strong>For MySQL:</strong>
                <a href="https://github.com/RohitM-IN/DbSyncKit/tree/master/DbSyncKit.Test/MySQL/Migrations">
                    MySQL Migrations
                </a>
            </li>
            <li>
                <strong>For PostgreSQL:</strong>
                <a href="https://github.com/RohitM-IN/DbSyncKit/tree/master/DbSyncKit.Test/PostgreSQL/Migrations">
                    PostgreSQL Migrations
                </a>
            </li>
        </ul>
    </section>


    </body>